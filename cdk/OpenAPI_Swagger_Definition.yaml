openapi: 3.0.0
servers: []
info:
  title: AI Learning Assistant API
  description: This API intended to deploy on aws API Gateway
  version: "1.0.0"
tags:
  - name: Student
    description: endpoints accessible by students
  - name: Instructor
    description: endpoints accessible by instructors
  - name: Admin
    description: endpoints accessible by admins
x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
  params-only:
    validateRequestParameters": true
    validateRequestBody": false
x-amazon-apigateway-request-validator: params-only
x-amazon-apigateway-gateway-responses:
  UNAUTHORIZED:
    statusCode: "401"
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    responseTemplates:
      application/json: |
        {"message":$context.error.messageString}
x-common-options: &commonOptions
  options:
    summary: CORS support
    description: |
      Enable CORS by returning correct headers
    responses:
      200:
        $ref: "#/components/responses/Success"
    x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
        application/json: |
          {
            "statusCode" : 200
          }
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          responseTemplates:
            application/json: |
              {}
paths:
  /student/text_generation:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Generate a response from the LLM
      operationId: student_text_generation_POST
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: session_id
          required: true
          description: ID of the session since multiple sessions can exist within a table
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient used to find the patient name which becomes the conversation's label
          schema:
            type: string
        - in: query
          name: session_name
          required: false
          description: Name of the session passed from the front-end after it has been created by the LLM
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the student's message
      responses:
        "200":
          description: Response with generated array and input value
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_name:
                    type: string
                    description: Name of the session which becomes the conversation's label
                  llm_output:
                    type: string
                    description: Response generated by the LLM
                  llm_verdict:
                    type: string
                    description: Judgement of the LLM whether the student has diagnosed the patient correctly
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TextGenLambdaDockerFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/delete_last_message:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Student
      summary: Delete last exchange between student and AI in certain conversation in DynamoDB table
      operationId: student_delete_last_conversation_DELETE
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session since multiple sessions can exist within a table
          schema:
            type: string
      responses:
        "200":
          description: Last exchange with student and AI deleted succesfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteLastMessage.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/update_session_name:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Student
      summary: Update session name
      operationId: student_update_session_name_PUT
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_name:
                  type: string
                  description: New name for the session
      responses:
        "200":
          description: Session name updated successfully
        "400":
          description: Bad Request
        "404":
          description: Session not found
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/create_user:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Create a student
      operationId: student_create_user_POST
      parameters:
        - in: query
          name: user_email
          required: false
          description: email of the user
          schema:
            type: string
        - in: query
          name: username
          required: false
          description: username of the user
          schema:
            type: string
        - in: query
          name: first_name
          required: false
          description: first name of the user
          schema:
            type: string
        - in: query
          name: last_name
          required: false
          description: last name of the user
          schema:
            type: string
      responses:
        "200":
          description: Student Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/get_user_roles:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Get the list of available regions
      operationId: student_get_user_roles_GET
      parameters:
        - in: query
          name: user_email
          required: false
          description: email of the user
          schema:
            type: string
      responses:
        "200":
          description: Roles Available
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/get_name:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Get the list of available regions
      operationId: student_get_name_GET
      parameters:
        - in: query
          name: user_email
          required: false
          description: email of the user
          schema:
            type: string
      responses:
        "200":
          description: Roles Available
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/simulation_group:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Get groups enrolled by a student
      operationId: student_simulation_group_GET
      parameters:
        - in: query
          name: email
          required: true
          description: Email of the student
          schema:
            type: string
      responses:
        "200":
          description: List of simulation groups
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/simulation_group_page:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Get simulation group page details for a student
      operationId: student_simulation_group_page_GET
      parameters:
        - in: query
          name: email
          required: true
          description: Email of the student
          schema:
            type: string
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
      responses:
        "200":
          description: Group page details
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/patient:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Get sessions for a patient accessed by a student
      operationId: student_patient_GET
      parameters:
        - in: query
          name: email
          required: true
          description: Email of the student
          schema:
            type: string
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
      responses:
        "200":
          description: Sessions for the patient
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/create_session:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Create a session for a student patient
      operationId: student_create_session_POST
      parameters:
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email of the student
          schema:
            type: string
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: session_name
          required: true
          description: name of the session
          schema:
            type: string
      responses:
        "200":
          description: Session created
        "400":
          description: Invalid value
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/delete_session:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Student
      summary: Delete a session for a student interaction
      operationId: student_delete_session_DELETE
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session to delete
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email of the student
          schema:
            type: string
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
      responses:
        "200":
          description: Session deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: ID of the deleted session
        "400":
          description: Invalid value or missing parameter
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/create_message:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Create a message for a session
      operationId: student_create_message_POST
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session where the message is sent
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email of the student sending the message
          schema:
            type: string
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group related to the session
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient related to the session
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the message
      responses:
        "200":
          description: Message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: ID of the session where the message was created
                  message_content:
                    type: string
                    description: Content of the created message
        "400":
          description: Invalid value or missing parameter
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/create_ai_message:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Create an AI response message for a session
      operationId: student_create_ai_message_POST
      parameters:
        - in: query
          name: session_id
          required: true
          description: ID of the session where the message is sent
          schema:
            type: string
        - in: query
          name: email
          required: true
          description: Email of the student associated with the session
          schema:
            type: string
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group related to the session
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient related to the session
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  description: Content of the AI's message
      responses:
        "200":
          description: AI message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: ID of the session where the message was created
                  message_content:
                    type: string
                    description: Content of the AI's created message
        "400":
          description: Invalid value or missing parameter
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/enroll_student:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Enroll a student in a group
      operationId: admin_enroll_student_POST
      parameters:
        - in: query
          name: student_email
          required: true
          schema:
            type: string
          description: Email of the student to enroll
        - in: query
          name: group_access_code
          required: true
          schema:
            type: string
          description: Access code of the group
      responses:
        "200":
          description: Student enrolled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student enrolled successfully."
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "student_email and group_access_code query parameters are required"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid group access code or simulation group not available."
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/get_messages:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Get all messages in a session
      operationId: get_messages_GET
      parameters:
        - in: query
          name: session_id
          required: true
          schema:
            type: string
          description: The ID of the session
      responses:
        "200":
          description: List of messages in the session
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: string
                    session_id:
                      type: string
                    student_sent:
                      type: boolean
                    message_content:
                      type: string
                    time_sent:
                      type: string
                      format: date-time
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "session_id query parameter is required"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Session not found"
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/get_notes:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Get all notes in a session
      operationId: get_notes_GET
      parameters:
        - in: query
          name: session_id
          required: true
          schema:
            type: string
          description: The ID of the session
      responses:
        "200":
          description: Notes for the session
          content:
            application/json:
              schema:
                type: object
                properties:
                  notes:
                    type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "session_id is required"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Notes not found"
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/update_notes:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Student
      summary: Update notes in a session
      operationId: update_notes_PUT
      parameters:
        - in: query
          name: session_id
          required: true
          schema:
            type: string
          description: The ID of the session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
      responses:
        "200":
          description: Notes updated successfully
        "400":
          description: Bad Request
        "404":
          description: Session not found
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/update_patient_score:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Update patient score based on LLM verdict
      operationId: student_update_patient_score_POST
      parameters:
        - in: query
          name: patient_id
          required: true
          schema:
            type: string
          description: ID of the simulation group patient
        - in: query
          name: student_email
          required: true
          schema:
            type: string
          description: Email of the student
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the simulation group
        - in: query
          name: llm_verdict
          required: true
          schema:
            type: boolean
          description: LLM verdict to determine the score of the student interaction
      responses:
        "200":
          description: Student Interaction score updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student Interaction score updated successfully."
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid query parameters."
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/get_all_files:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - student
      summary: Get a list of all the document files for a specific group and patient
      operationId: student_get_all_files_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
        - in: query
          name: patient_name
          required: true
          description: Name of the patient
          schema:
            type: string
      responses:
        "200":
          description: Recieved all the files for the group and patient successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    description: A list of file names in the specified group and patient directory
                    items:
                      type: string
                      description: Name of the file
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFilesFunctionStudent.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/get_profile_pictures:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Student
      summary: Get profile picture URLs for a list of patients in a specific group
      operationId: student_get_all_profile_pics_POST
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
      responses:
        "200":
          description: Received all profile picture URLs successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile_pictures:
                    type: object
                    description: Mapping of patient IDs to profile picture URLs
                    additionalProperties:
                      type: string
                      description: Presigned URL for the profile picture of the patient
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProfilePicturesStudent.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /student/get_completion_status:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Student
      summary: Fetch all interactions with completion status for the specified simulation group
      operationId: student_get_completion_status_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: student_email
          required: true
          schema:
            type: string
          description: Email of the student
      responses:
        "200":
          description: Successfully retrieved completion statuses for interactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuses:
                    type: array
                    description: A list of completion statuses for the specified student's interactions
                    items:
                      type: object
                      properties:
                        student_interaction_id:
                          type: string
                          description: The unique identifier for the student interaction
                        is_completed:
                          type: boolean
                          description: Completion status of the interaction
                        patient_name:
                          type: string
                          description: Name of the patient associated with this interaction
        "400":
          description: Bad Request - Missing query parameters
        "500":
          description: Internal Server Error
      security:
        - studentAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
 
  /instructor/student_group:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get student groups
      operationId: instructor_student_group_GET
      parameters:
        - in: query
          name: email
          required: true
          description: email of the instructor
          schema:
            type: string
      responses:
        "200":
          description: Groups student is a part of are returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedurl:
                    type: string
                    description: Presigned URL to upload document file to S3 Bucket
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/generate_presigned_url:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Generate a presigned URL for uploading files
      operationId: instructor_generate_presigned_url_GET_2
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
        - in: query
          name: patient_name
          required: true
          description: Name of the patient
          schema:
            type: string
        - in: query
          name: file_type
          required: true
          description: Type of file
          schema:
            type: string
        - in: query
          name: file_name
          required: true
          description: Name of the file
          schema:
            type: string
        - in: query
          name: folder_type
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Presigned URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  presignedurl:
                    type: string
                    description: Presigned URL to upload document file to S3 Bucket
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePreSignedURLFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/get_all_files:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get a list of all the document files for a specific group and patient
      operationId: instructor_get_all_files_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
        - in: query
          name: patient_name
          required: true
          description: Name of the patient
          schema:
            type: string
      responses:
        "200":
          description: Recieved all the files for the group and patient successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    description: A list of file names in the specified group and patient directory
                    items:
                      type: string
                      description: Name of the file
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFilesFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/get_profile_pictures:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Instructor
      summary: Get profile picture URLs for a list of patients in a specific group
      operationId: instructor_get_all_profile_pics_POST
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
      responses:
        "200":
          description: Received all profile picture URLs successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile_pictures:
                    type: object
                    description: Mapping of patient IDs to profile picture URLs
                    additionalProperties:
                      type: string
                      description: Presigned URL for the profile picture of the patient
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProfilePictures.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/groups:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get simulation groups where the instructor is enrolled
      operationId: instructor_get_groups_GET
      parameters:
        - in: query
          name: email
          required: true
          description: Email of the instructor
          schema:
            type: string
      responses:
        "200":
          description: Simulation groups retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/delete_file:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Instructor
      summary: Delete certain file
      operationId: instructor_delete_file_DELETE
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the simulation group
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
        - in: query
          name: patient_name
          required: true
          description: Name of the patient
          schema:
            type: string
        - in: query
          name: file_type
          required: true
          description: Type of file (pdf or jpg)
          schema:
            type: string
        - in: query
          name: file_name
          required: true
          description: Name of the file
          schema:
            type: string
        - in: query
          name: folder_type
          required: true
          description: Type of folder
          schema:
            type: string
      responses:
        "200":
          description: File deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteFileFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/delete_patient_s3:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Instructor
      summary: Delete certain file
      operationId: instructor_delete_patient_s3_DELETE
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group
          schema:
            type: string
        - in: query
          name: patient_id
          required: true
          description: ID of the patient
          schema:
            type: string
        - in: query
          name: patient_name
          required: true
          description: Name of the patient
          schema:
            type: string
      responses:
        "200":
          description: File deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePatientFunc.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/update_metadata:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Instructor
      summary: Update the metadata of a file in a patient
      operationId: instructor_update_metadata_PUT
      parameters:
        - in: query
          name: patient_id
          required: true
          description: ID of the patient containing the file
          schema:
            type: string
        - in: query
          name: filename
          required: true
          description: Name of the file to update
          schema:
            type: string
        - in: query
          name: filetype
          required: true
          description: Type of the file to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: string
                  description: New metadata content for the file
      responses:
        "200":
          description: Metadata updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_id:
                    type: string
                    description: UUID of the file
                  patient_id:
                    type: string
                    description: UUID of the patient
                  filetype:
                    type: string
                    description: Type of the file
                  s3_bucket_reference:
                    type: string
                    description: Reference to the S3 bucket
                  filepath:
                    type: string
                    description: File path
                  filename:
                    type: string
                    description: Name of the file
                  time_uploaded:
                    type: string
                    format: date-time
                    description: Time when the file was uploaded
                  metadata:
                    type: string
                    description: Updated metadata content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        "404":
          description: File not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/view_patients:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get all patients in a given group
      operationId: instructor_view_patients_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: The ID of the group to retrieve patients from
          schema:
            type: string
      responses:
        "200":
          description: Patients retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/analytics:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get analytics data for a specific group
      operationId: instructor_analytics_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group for which analytics are requested
          schema:
            type: string
      responses:
        "200":
          description: Analytics data retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/reorder_patient:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Instructor
      summary: Reorder and edit an existing patient
      operationId: instructor_reorder_patient_PUT
      parameters:
        - in: query
          name: patient_id
          required: true
          description: ID of the patient to be reordered or edited
          schema:
            type: string
        - in: query
          name: patient_number
          required: true
          description: New number for the patient
          schema:
            type: integer
        - in: query
          name: instructor_email
          required: true
          description: Email of the instructor making the change
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patient_name:
                  type: string
                  description: New name for the patient
      responses:
        "200":
          description: Patient updated successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/create_patient:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Instructor
      summary: Create a new patient within a simulation group
      operationId: instructor_create_patient_POST
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the simulation group where the patient will be created
          schema:
            type: string
        - in: query
          name: patient_name
          required: true
          description: Name of the new patient
          schema:
            type: string
        - in: query
          name: patient_age
          required: true
          description: Age of the new patient
          schema:
            type: integer
        - in: query
          name: patient_gender
          required: true
          description: Gender of the new patient
          schema:
            type: string
        - in: query
          name: patient_number
          required: true
          description: Number of the new patient
          schema:
            type: integer
        - in: query
          name: instructor_email
          required: true
          description: Email of the instructor creating the patient
          schema:
            type: string        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patient_prompt:
                  type: string
                  description: Patient prompt for the patient    
      responses:
        "200":
          description: Patient created successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/edit_patient:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Instructor
      summary: Update details of a patient within a group
      operationId: instructor_edit_patient_PUT
      parameters:
        - in: query
          name: patient_id
          required: true
          description: ID of the patient to be updated
          schema:
            type: string
        - in: query
          name: instructor_email
          required: true
          description: Email of the instructor updating the patient
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patient_name:
                  type: string
                patient_age:
                  type: integer
                patient_gender:
                  type: string
                patient_prompt:
                  type: string
              required:
                - patient_name
                - patient_age
                - patient_gender
                - patient_prompt
      responses:
        "200":
          description: Patient updated successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/previous_prompts:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Retrieve all previous prompts for a specific group and instructor
      operationId: instructor_get_previous_prompts
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: instructor_email
          required: true
          schema:
            type: string
          description: Email of the instructor
      responses:
        "200":
          description: Successfully retrieved previous prompts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                      description: Timestamp of when the prompt was updated
                    previous_prompt:
                      type: string
                      description: Previous system prompt
        "400":
          description: Bad Request - Missing query parameters
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/student_patients_messages:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Retrieve all conversations for a student for a specific patient in a group
      operationId: instructor_student_patients_messages_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: student_email
          required: true
          schema:
            type: string
          description: Email of the student
      responses:
        "200":
          description: Successfully retrieved student messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    description: A list of student messages for the specified patient
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                          description: Timestamp of the message
                        message:
                          type: string
                          description: Content of the message
        "400":
          description: Bad Request - Missing query parameters
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/get_completion_status:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Fetch all interactions with completion status for the specified simulation group
      operationId: instructor_get_completion_status_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: student_email
          required: true
          schema:
            type: string
          description: Email of the student
      responses:
        "200":
          description: Successfully retrieved completion statuses for interactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  statuses:
                    type: array
                    description: A list of completion statuses for the specified student's interactions
                    items:
                      type: object
                      properties:
                        student_interaction_id:
                          type: string
                          description: The unique identifier for the student interaction
                        is_completed:
                          type: boolean
                          description: Completion status of the interaction
                        patient_name:
                          type: string
                          description: Name of the patient associated with this interaction
        "400":
          description: Bad Request - Missing query parameters
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/ingestion_status:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get the ingestion_status of LLM files for specific patient in simulation group
      operationId: instructor_ingestion_status_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: patient_id
          required: true
          schema:
            type: string
          description: ID of the patient
      responses:
        "200":
          description: Successfully retrieved ingestion_status of LLM files for specific patient in simulation group
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  description: Map containing filenames as keys and ingestion_status as values.
                example:
                  "Patient_Record_1.pdf": "Processing"
                  "Patient_Record_2.pdf": "Completed"
                  "Patient_Record_3.pdf": "Failed"
        "400":
          description: Bad Request - Missing query parameters
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/toggle_completion:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Instructor
      summary: Switch the completion status of an interaction
      operationId: instructor_toggle_completion_PUT
      parameters:
        - in: query
          name: student_interaction_id
          required: true
          schema:
            type: string
          description: ID of the interaction
      responses:
        "200":
          description: Successfully toggled completion status for interaction
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_interaction_id:
                    type: string
                    description: The unique identifier for the student interaction
                  is_completed:
                    type: boolean
                    description: Updated completion status of the interaction
        "400":
          description: Bad Request - Missing query parameters
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/toggle_llm_completion:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Instructor
      summary: Switch the LLM completion Boolean for a patient
      operationId: instructor_toggle_llm_completion_PUT
      parameters:
        - in: query
          name: patient_id
          required: true
          schema:
            type: string
          description: ID of the patient
      responses:
        "200":
          description: Successfully toggled LLM completion Boolean for patient
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message
                  llm_completion:
                    type: boolean
                    description: Updated LLM completion Boolean for patient
        "400":
          description: Bad Request - Missing query parameters
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/prompt:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Instructor
      summary: Update system prompt for a group
      operationId: instructor_update_prompt_PUT
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group to update the prompt
          schema:
            type: string
        - in: query
          name: instructor_email
          required: true
          description: Email of the instructor updating the prompt
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
              required:
                - prompt
      responses:
        "200":
          description: System prompt updated successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/view_students:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: View students enrolled in a group
      operationId: instructor_view_students_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group to view enrolled students
          schema:
            type: string
      responses:
        "200":
          description: Students retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/delete_student:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Instructor
      summary: Delete a student from a group
      operationId: instructor_delete_student_DELETE
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: ID of the group from which the student will be deleted
          schema:
            type: string
        - in: query
          name: user_email
          required: true
          description: Email of the student to be deleted
          schema:
            type: string
        - in: query
          name: instructor_email
          required: true
          description: Email of the instructor performing the deletion
          schema:
            type: string
      responses:
        "200":
          description: Student deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Student not found in the simulation group
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/delete_patient:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Instructor
      summary: Delete a patient
      operationId: instructor_delete_patient_DELETE
      parameters:
        - in: query
          name: patient_id
          required: true
          description: The ID of the patient to delete
          schema:
            type: string
      responses:
        "200":
          description: Patient deleted successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/get_prompt:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get the system prompt for a group
      operationId: instructor_get_prompt_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: The ID of the group
          schema:
            type: string
      responses:
        "200":
          description: Prompt retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  system_prompt:
                    type: string
                    description: The system prompt set for the group
        "400":
          description: Bad Request
        "404":
          description: Simulation group not found
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/generate_access_code:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    put:
      tags:
        - Instructor
      summary: Generate a new access code for a simulation group
      operationId: instructor_generate_access_code_PUT
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: The ID of the simulation group
          schema:
            type: string
      responses:
        "200":
          description: Access code generated successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/get_access_code:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get the access code for a group
      operationId: instructor_get_access_code_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: The ID of the group
          schema:
            type: string
      responses:
        "200":
          description: Access code retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /instructor/view_student_messages:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Instructor
      summary: Get all messages for a specific student in a specific group
      operationId: instructor_view_student_messages_GET
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          description: The ID of the group
          schema:
            type: string
        - in: query
          name: student_email
          required: true
          description: The email of the student
          schema:
            type: string
      responses:
        "200":
          description: Messages retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - instructorAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

  /admin/elevate_instructor:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: Elevate a user to instructor role
      operationId: admin_elevate_instructor_POST
      parameters:
        - in: query
          name: email
          required: true
          description: Email of the user to be elevated
          schema:
            type: string
      responses:
        "200":
          description: User role updated to instructor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User role updated to instructor.
        "201":
          description: New user created and elevated to instructor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: New user created and elevated to instructor.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is required
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/instructors:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get all instructors
      operationId: admin_get_instructors_GET
      parameters:
        - in: query
          name: instructor_email
          required: true
          description: Email of the admin accessing the list of instructors
          schema:
            type: string
      responses:
        "200":
          description: List of instructors retrieved successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "429":
          description: Too Many Requests
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/simulation_groups:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get all simulation groups
      operationId: admin_simulation_groups_GET
      responses:
        "200":
          description: List of simulation groups retrieved successfully
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/enroll_instructor:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: Enroll an instructor in a group
      operationId: admin_enroll_instructor_POST
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                simulation_group_id:
                  type: string
                  description: ID of the group to enroll the instructor in
                instructor_email:
                  type: string
                  description: Email of the instructor to enroll
      responses:
        "200":
          description: Enrollment created successfully
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/create_simulation_group:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: Create a new group
      operationId: admin_create_simulation_group_POST
      parameters:
        - in: query
          name: group_name
          required: true
          schema:
            type: string
          description: Name of the group
        - in: query
          name: group_access_code
          required: true
          schema:
            type: string
          description: Access code for the group
        - in: query
          name: group_student_access
          required: true
          schema:
            type: boolean
          description: Student access details for the group
        - in: query
          name: group_description
          required: true
          schema:
            type: string
          description: A brief description of the simulation group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                system_prompt:
                  type: string
                  description: System prompt for the simulation group              
              # group_description:
              #   type: string
              #   description: A brief description of the simulation group
      responses:
        "200":
          description: Simulation group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  simulation_group_id:
                    type: string
                    description: ID of the newly created simulation group
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/groupInstructors:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get all instructors for a given group
      operationId: admin_group_instructors_GET
      parameters:
        - name: simulation_group_id
          in: query
          required: true
          schema:
            type: string
          description: ID of the group to find instructors for
      responses:
        "200":
          description: List of instructors
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_email:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/instructorGroups:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    get:
      tags:
        - Admin
      summary: Get all groups for a given instructor where enrolment type is instructor
      operationId: admin_get_instructor_groups_GET
      parameters:
        - name: instructor_email
          in: query
          required: true
          schema:
            type: string
          description: Email of the instructor to find groups for
      responses:
        "200":
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    simulation_group_id:
                      type: string
                    group_name:
                      type: string
                    group_description:
                      type: string
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/updateGroupAccess:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: update the access of a group
      operationId: admin_re_enroll_instructor_POST
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group
        - in: query
          name: access
          required: true
          schema:
            type: boolean
          description: Email of the instructor
      responses:
        "200":
          description: Instructor re-enrolled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrolment_id:
                    type: string
                  simulation_group_id:
                    type: string
                  user_email:
                    type: string
                  enrolment_type:
                    type: string
                  time_enroled:
                    type: string
                    format: date-time
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "simulation_group_id and access are required"
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_instructor_enrolments:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Admin
      summary: Delete all enrolments for an instructor
      operationId: admin_delete_instructor_enrolments_DELETE
      parameters:
        - in: query
          name: instructor_email
          required: true
          schema:
            type: string
          description: Email of the instructor whose enrolments are to be deleted
      responses:
        "200":
          description: Instructor enrolments deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Instructor enrolments deleted successfully."
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "instructor_email query parameter is required"
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_group_instructor_enrolments:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Admin
      summary: Delete all instructor enrolments for a group
      operationId: admin_delete_group_instructor_enrolments_DELETE
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group for which instructor enrolments are to be deleted
      responses:
        "200":
          description: Group instructor enrolments deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group instructor enrolments deleted successfully."
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "simulation_group_id query parameter is required"
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/delete_group:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    delete:
      tags:
        - Admin
      summary: Delete a group and all related records
      operationId: admin_delete_group_DELETE
      parameters:
        - in: query
          name: simulation_group_id
          required: true
          schema:
            type: string
          description: ID of the group to be deleted
      responses:
        "200":
          description: Group and related records deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Group and related records deleted successfully."
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "simulation_group_id query parameter is required"
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /admin/lower_instructor:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        200:
          $ref: "#/components/responses/Success"
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - Admin
      summary: Lower an instructor to a student role
      operationId: admin_lower_instructor_POST
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
          description: Email of the user to be lowered from instructor to student
      responses:
        "200":
          description: Instructor role lowered to student
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User role updated to student for example@example.com"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not an instructor or email is missing"
        "500":
          description: Internal Server Error
      security:
        - adminAuthorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

components:
  securitySchemes:
    adminAuthorizer:
      type: "apiKey"
      name: "Authorization" # The header name where the token is provided
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${adminLambdaAuthorizer.Arn}/invocations"
        identitySource: method.request.header.Authorization
    studentAuthorizer:
      type: "apiKey"
      name: "Authorization" # The header name where the token is provided
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${studentLambdaAuthorizer.Arn}/invocations"
        identitySource: method.request.header.Authorization
    instructorAuthorizer:
      type: "apiKey"
      name: "Authorization" # The header name where the token is provided
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${instructorLambdaAuthorizer.Arn}/invocations"
        identitySource: method.request.header.Authorization
  responses:
    Success:
      description: Request success
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content: {}
